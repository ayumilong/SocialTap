define(['dojo/_base/declare',
		'dojo/_base/lang',
		'dojo/Evented',
		'dojo/request/xhr',
		'dijit/_WidgetBase',
		'dojo-mama/util/_InfiniteScrollMixin',
		'./DataAccordion',
		'./TweetListItem'
], function(declare, lang, Evented, xhr, WidgetBase, InfiniteScroll,
		DataAccordion, TweetListItem)
{
	return declare([WidgetBase, InfiniteScroll, Evented], {

		'class': 'vis',

		// datasetId: Integer
		//     ID of dataset to run inquiry against.
		datasetId: null,

		// elasticsearchQuery: Object
		//     Elasticsearch query generated by inquiry form.
		elasticsearchQuery: null,

		list: null,

		// orderBy: String
		//     Field to order results by.
		//     TODO: This shouldn't be hard coded as there's no guarantee
		//     the dataset contains activities.
		orderBy: "postedTime",

		// orderAsc: Boolean
		//     Get results in ascending/descending order.
		orderAsc: true,

		// pageSize: Integer
		//     Number of results to fetch in each page.
		pageSize: 30,

		buildRendering: function() {
			this.inherited(arguments);

			this.list = new DataAccordion();
			this.list.placeAt(this.domNode);
			this.list.startup();
		},

		handlePageData: function(data, pageNumber) {
			console.log('handle data for page ' + pageNumber);

			console.log(data);

			if (pageNumber === 0) {
				this.emit('display_info', 'Inquiry matched ' + data.hits.total + ' items');
			}

			var i, li;
			for (i = 0; i < data.hits.hits.length; i++) {
				li = new TweetListItem({
					data: data.hits.hits[i]._source,
					label: data.hits.hits[i]._source.actor.displayName
				});
				this.list.addChild(li);
			}
		},

		reload: function() {
			this.list.clear();
			this.resetInfiniteScroll();
			this.loadPage(0);
		},

		requestForPage: function(pageNumber) {

			var query = lang.mixin(this.elasticsearchQuery, {
				size: this.pageSize,
				from: (pageNumber * this.pageSize),
				sort: [{}]
			});

			query.sort[0][this.orderBy] = {
				mode: 'min',
				order: (this.orderAsc ? 'asc' : 'desc')
			};

			return xhr.post('/api/v0/datasets/' + this.datasetId + '/search', {
				data: JSON.stringify({elasticsearch: query}),
				handleAs: 'json',
				headers: {
					'Content-Type': 'application/json'
				}
			}).response;
		}

		// TODO:
		//     Call reload whenever orderBy, orderAsc, or pageSize is changed.

	});
});
